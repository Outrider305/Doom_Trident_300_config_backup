############################################################################################################################################################################################################################
#                    MACROS
############################################################################################################################################################################################################################


####################################################################################################################
#                  START
####################################################################################################################


[gcode_macro PRINT_START]
gcode:		
	# Parameters
	{% set bed = params.BED|int %}
	{% set hotend = params.HOTEND|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}
    {% set material = params.MATERIAL|default('')|string %}
    {% set nozzle = params.NOZZLE|default('0')|string %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
    {% set fanspd = printer["gcode_macro MACROS_VARS"].circ_fan_speed|default(0)%}
    {% set probetmp = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}

    ### Reset and Safety Macros ###

    # Cancel exhaust off timer (if there is one)
   #UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0
    # Cancel off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0
    # Cancel Nevermore off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_NEVERMORE_OFF DURATION=0 
    # Turn on case light
	SET_PIN PIN=caselight VALUE=1
    # Reset speed, accel etc to configured values
	RESETSPEEDS
    # Reset LCD RGB
	RESETRGB
    # Turn on SB LEDs
    SET_NOZZLE_LEDS_ON
    STATUS_HEATING

    ### Starting Macros ###
    AUTO_PA MATERIAL={material} NOZZLE={nozzle}				
    AUTO_NEVERMORE MATERIAL={material} 
    SET_TEMP HEATER="bed" TEMP={bed} WAIT=1
    SET_TEMP HEATER="extruder" TEMP={probetmp} WAIT=1
    HOME
	ABSOLUTE_COORDINATES																				
    VERIFY_HEATSOAK BED={bed} CHAMBER={chamber}       
    Z_TILT_ADJUST
    SET_TEMP HEATER="extruder" TEMP={hotend} WAIT=1
    STATUS_CLEANING
    CLEANNOZZLE                                                                                        
    STATUS_CALIBRATING_Z
    COMPUTE_MESH_PARAMETERS SIZE={fl_size}
    CALIBRATE_Z
    ADAPTIVE_BED_MESH
    PARKPURGE
    FILAMENT_PURGE
    STATUS_READY
    SWIPENOZZLE
    DISPLAYTEXT TEXT="Printing..."
    STATUS_PRINTING


######################################################################################
#                  CHAMBER TEMP 
######################################################################################


[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}
    {% set fanspd = printer["gcode_macro MACROS_VARS"].circ_fan_speed|default(0)%}

     ### Reset and Safety Macros ###

    # Cancel exhaust off timer (if there is one)
   #UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0
    # Cancel off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0
    # Cancel Nevermore off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_NEVERMORE_OFF DURATION=0 
    # Turn on case light
	SET_PIN PIN=caselight VALUE=1
    # Reset speed, accel etc to configured values
	RESETSPEEDS
    # Reset LCD RGB
	RESETRGB
    # Turn on SB LEDs
    SET_NOZZLE_LEDS_ON
    STATUS_HEATING
    # Turn on Nevermore
    NEVERMORE_ON

    # Heat bed
	M140 S{t}
    # Set hotend to no-ooze temp and turn on part fan (80%)
	{% if t >= 100 %}
		SET_TEMP HEATER="extruder" TEMP={probetmp} WAIT=1
		SET_FAN SPEED={fanspd}
	{% else %}
		SET_FAN
	{% endif %}
	{% if move == 1 %}
		C_HOME
		PARKCENTER
	{% endif %}

[gcode_macro VERIFY_HEATSOAK]
gcode:
    # Parameters
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set bed = params.BED|int %}

    # If chamber is not at temp yet
    {% if printer["temperature_sensor chamber"].temperature < chamber %}
        # heatsoak macro + park in center
		HEATSOAK T={bed} MOVE=1		
        # Heat bed, wait for final chamber temp
		M190 S{bed}
		TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}
	{% else %}	
        # if chamber is already at temp,but bed is not fully heated (within 2C):
        # heatsoak, park, and wait for bed final temp
		{% if printer.heater_bed.temperature < (bed-2) %}												
			HEATSOAK T={bed} MOVE=1
			M190 S{bed}
		{% else %}																						
            # and if bed is already heated, heatsoak without parking
			HEATSOAK T={bed} MOVE=0
		{% endif %}
	{% endif %}	
	SET_FAN	


####################################################################################################################
#                  END/CANCEL
####################################################################################################################


[gcode_macro PRINT_END]
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
	RESETRGB
	#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	CLEAR_PAUSE
	CLEAR_BUFFER
    RESETSPEEDS
    SET_FAN ; turn off part cooling fan
    ABSOLUTE_COORDINATES                           	    			 												
	PARKEND
	RESET_EXTRUDER
    FORM_TIP
    TURN_OFF_HEATERS
    FILTER_CHAMBER_AIR
	Z_HOP_5											
	BED_MESH_CLEAR
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=2700 ; turn everything off in 45 min
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    DISPLAYTEXT TEXT="Print finished!"
    STATUS_OFF


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  SDCARD_RESET_FILE
  PRINT_END
  CANCEL_PRINT_BASE


####################################################################################################################
#                  PAUSE / FILAMENT CHANGE / RESUME
####################################################################################################################


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			RELATIVE_COORDINATES																							; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		ABSOLUTE_COORDINATES																								; absolute positioning
  		PARKPAUSE								                                                                            ; park toolhead at front center
        FORM_TIP
        SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}


# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																; enable filament sensor
		RESETRGB																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
        PARKPURGE
        FILAMENT_PURGE                                                                                                      ; park toolhead at purge bucket and purge filament
        SWIPENOZZLE
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)						
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
		BASE_RESUME																											; resume print
	{% endif %}




