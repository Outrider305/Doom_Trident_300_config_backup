
############################################################################################################################################################################################################################
############################################################################################################################################################################################################################
#                Base Macros 
############################################################################################################################################################################################################################
############################################################################################################################################################################################################################


####################################################################################################################
#               PRESSURE ADVANCE 
####################################################################################################################


# This will just set a default value for PA per nozzle size and filament type. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.

[gcode_macro AUTO_PA]
description: Set pressure advance value based on material type and nozzle diameter
gcode:
    #
    #
    {% set pa_settings = {
        'ABS': {
            0.4: 0.075,
            0.6: 0.000,
            0.8: 0.000
        },
         'ASA': {
            0.4: 0.075,
            0.6: 0.000,
            0.8: 0.000
        },
        'PET': {
            0.4: 0.055,
            0.6: 0.000,
            0.8: 0.000
        },
        'PLA': {
            0.4: 0.045,
            0.6: 0.000,
            0.8: 0.000
        },
    } %}
    
    {% set material = params.MATERIAL|default('')|string|upper %}
    {action_raise_error('AUTO_PA: must provide a recognized value for the MATERIAL parameter') if material not in pa_settings}
    
    {% set nozzle_diameter = params.NOZZLE|default(0)|float %}
    {action_raise_error('AUTO_PA: must provide a recognized value for the NOZZLE parameter') if nozzle_diameter not in pa_settings[material]}
    
    {action_respond_info('AUTO_PA: setting value to "%s" for MATERIAL=%s and NOZZLE=%s. Previous value was: %s' % (pa_settings[material][nozzle_diameter]|string, material, nozzle_diameter|string, printer.configfile.settings['extruder'].pressure_advance))}
    SET_PRESSURE_ADVANCE ADVANCE={pa_settings[material][nozzle_diameter]}

    {% if MATERIAL == "PET" %}
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1
    {% endif %}


# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}


##############################################################################################################
#                CONDITIONAL HOMING
##############################################################################################################

# Conditional G28 (home if not already homed)
[gcode_macro C_HOME]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		HOME
	{% endif %}


# Conditional G28 (home if not already homed)
[gcode_macro C_HOME_XY]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}


[gcode_macro C_HOME_Z]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}


##############################################################################################################
#                              G Code Overrides
##############################################################################################################


[gcode_macro HOME]
gcode:
   DISPLAYTEXT TEXT="Homing"
   STATUS_HOMING
   G28
   DISPLAYTEXT TEXT="Honey, Im Home!"
   STATUS_READY

[gcode_macro CLEAR_BUFFER]
gcode:
    M400

[gcode_macro ABSOLUTE_COORDINATES]
gcode:
    G90

[gcode_macro RELATIVE_COORDINATES]
gcode:
    G91

[gcode_macro ABSOLUTE_EXTRUSION]
gcode:
    M82

[gcode_macro RELATIVE_EXTRUSION]
gcode:
    M83

[gcode_macro DISABLE_MOTORS]
gcode:
   M84

[gcode_macro RESET_EXTRUDER]
gcode:
    DISPLAYTEXT TEXT="Resetting Extruder"
    G92 E0 ; reset extruder
    DISPLAYTEXT TEXT="Extruder Reset"

[gcode_macro WAIT]
gcode:
    {% set TIME = params.TIME|default(0)|int %}
    G4 P{TIME*1000}

[gcode_macro DISPLAYTEXT]
gcode:
    {% set TEXT = params.TEXT|default("")|string %} 
    RESPOND MSG="{TEXT}"
    SET_DISPLAY_TEXT MSG="{TEXT}"

[gcode_macro SET_FAN]
gcode:
    {% set SPEED = params.SPEED|default(0)|int %}
    {% if SPEED == 0 %}
    M107
    {% else %}
    M106 S{SPEED}
    {% endif %}

[gcode_macro SET_TEMP]
gcode:
    {% set HEATER = params.HEATER|default("")|string %}
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    {% if HEATER == "extruder" %}
      {% if WAIT == 1 %}
    M109 S{TEMP}
      {% else %}
    M104 S{TEMP}
      {% endif %}
    {% else %}
     {% if WAIT == 1 %}
    M190 S{TEMP}
      {% else %}
    M140 S{TEMP}
      {% endif %}
    {% endif %}

# Filament runout / change alias	
[gcode_macro M600]
gcode:
	LCDRGB R=0 G=0 B=1	# Turn LCD green
	PAUSE

[gcode_macro Z_HOP_5]
gcode:
  {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}; check that zhop doesn't exceed z max
    RELATIVE_COORDINATES
	G1 Z5 F900; raise Z up by z hop amount
    ABSOLUTE_COORDINATES
  {% else %}
	{ action_respond_info("Z Hop exceeds maximum Z height.") }; if z max is exceeded, show message and set zhop value for resume to 0
  {% endif %}


#Moved from Bed_Fans.cfg
##############################################################################################################
#                              Heater Overrides w/ Bed Fans logic 
##############################################################################################################


# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}


# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BedFansSlow																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BedFansOff																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}		# Wait for bed temp

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BedFansFast																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}


# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BedFansSlow
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BedFansOff
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}


# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BedFansOff
	_TURN_OFF_HEATERS
     SET_FAN_SPEED FAN=nevermore SPEED=0

[gcode_macro TEMPERATURE_WAIT]
rename_existing: _TEMPERATURE_WAIT
gcode:
    {% set SENSOR = params.SENSOR|default("")|string %}
    {% set MINIMUM = params.MINIMUM|int %}
    {% set MSG = SENSOR + "temperature has reached " + MINIMUM |string %}
    DISPLAYTEXT TEXT="Heatsoaking, Please wait.."
    _TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} 
    DISPLAYTEXT TEXT="{MSG}"

##############################################################################################################
#                        FLUIDD / MAINSAIL SHORTCUTS 
##############################################################################################################


[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}



##############################################################################################################
#                           SAFETY
##############################################################################################################


# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.45 
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.45 
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.45 
	#SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 


# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} 
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} 
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} 
	#SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} 


[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}


[gcode_macro OFF]
gcode:
	DISABLE_MOTORS									; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
#	SET_FAN_SPEED FAN=Exhaust SPEED=0  				; turn exhaust fan off
#	SET_FAN_SPEED FAN=BedFans SPEED=0				; bed fan off
    SET_FAN_SPEED FAN=nevermore SPEED=0				; Nevermore off
	SET_PIN PIN=caselight VALUE=0					; turn light off
    LCDRGB R=0 G=0 B=0	                            ; Turn LCD off
    STATUS_OFF                                      ; Turn Stealthburner LED off

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
